{"version":3,"sources":["components/FormAddList.js","components/ListIngredients.js","App.js","registerServiceWorker.js","index.js"],"names":["FromAddList","_ref","addIngredient","removeCross","react_default","a","createElement","type","ref","input","FormAddList_this","textInput","className","onClick","ListIngredients","ingredient","id","cross","remove","current","App","state","list","currentToDo","_this","value","trim","length","push","focus","alert","setState","removeIngredient","splice","crossIngredient","removeCrossIngredient","ingredientsNoCross","filter","_this2","this","react","FormAddList","map","_ref2","components_ListIngredients","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.517757b0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst FromAddList = ({ addIngredient, removeCross }) => {\r\n  return (\r\n    <div>\r\n      <input type=\"text\" ref={input => this.textInput = input} />\r\n      <i className=\"fas fa-plus border-right\" onClick={() => addIngredient(this.textInput)}></i>\r\n      <i className=\"far fa-trash-alt\" onClick={removeCross}></i>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FromAddList;","import React from 'react';\r\n\r\nconst ListIngredients = ({ ingredient, id, cross, remove, current }) => {\r\n  return (\r\n    <div id={id} className=\"margin display-flex\">\r\n      <span className={current ? \"croos-out\" : null}>{ingredient}</span>\r\n        <i className=\"fas fa-check border-right\" onClick={() => cross(id)}></i>\r\n        <i className=\"far fa-trash-alt\" onClick={() => remove(id)}></i>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ListIngredients;","import React, { Component, Fragment } from 'react';\r\nimport './App.css';\r\nimport FormAddList from './components/FormAddList';\r\nimport ListIngredients from './components/ListIngredients';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    list: [\r\n      {\r\n        ingredient: 'Tarea de mate',\r\n        currentToDo: false\r\n      },\r\n      {\r\n        ingredient: 'Comprar comida',\r\n        currentToDo: false\r\n      }\r\n    ]\r\n  }\r\n\r\n  addIngredient = (ingredient) => {\r\n    const { list } = this.state;\r\n\r\n    if (ingredient.value.trim().length !== 0) {\r\n      list.push({\r\n        ingredient: ingredient.value,\r\n        currentToDo: false\r\n      })\r\n\r\n      ingredient.value = '';\r\n      ingredient.focus();\r\n    } else {\r\n      alert('Escribe un ingrediente :)');\r\n      ingredient.focus();\r\n    }\r\n\r\n    this.setState({ list });\r\n  }\r\n\r\n  removeIngredient = (id) => {\r\n    const { list } = this.state;\r\n    list.splice(id, 1);\r\n    this.setState({ list });\r\n  }\r\n\r\n  crossIngredient = (id) => {\r\n    const { list } = this.state;\r\n    list[id].currentToDo = !list[id].currentToDo;\r\n    this.setState({ list })\r\n  }\r\n\r\n  removeCrossIngredient = () => {\r\n    const { list } = this.state;\r\n    const ingredientsNoCross = list.filter(({ currentToDo }) => currentToDo === false);\r\n    this.setState({ list: ingredientsNoCross });\r\n  }\r\n\r\n  render() {\r\n    const { list } = this.state;\r\n\r\n    return (\r\n      <Fragment>\r\n        <header>\r\n          <h1 className=\"\">To-Do List</h1>\r\n        </header>\r\n        <section>\r\n          <h4 className=\"margin-b\">Agrega una tarea</h4>\r\n          <FormAddList\r\n            addIngredient={this.addIngredient}\r\n            removeCross={this.removeCrossIngredient}\r\n          />\r\n        </section>\r\n        {list.map(({ ingredient, currentToDo }, id) => {\r\n          return (\r\n            <ListIngredients\r\n              ingredient={ingredient}\r\n              id={id}\r\n              key={id}\r\n              current={currentToDo}\r\n              cross={this.crossIngredient}\r\n              remove={this.removeIngredient}\r\n            />\r\n          )\r\n        })}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}